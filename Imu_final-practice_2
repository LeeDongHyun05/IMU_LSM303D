#include <Wire.h>
#include <LSM303.h>

#define A0pin A0
#define SIpin 23
#define CLKpin 22
#define NPIXELS 128

#define ENA 4
#define IN1 15
#define IN2 14
#define IN3 7
#define IN4 8
#define ENB 3

byte Pixel[NPIXELS];
byte Threshold_Data[NPIXELS];

int mission_flag = 0;

int LineSensor_Data[NPIXELS];
int LineSensor_Data_Adaption[NPIXELS];
int MAX_LineSensor_Data[NPIXELS];
int MIN_LineSensor_Data[NPIXELS];
int flag_line_adapation;

const int IMG_WIDTH_HALF = 60;
const int BASE_SPEED = 70;
const float KP = 3.0;
const float KD = 0.2;
float error_old = 0.0;

#define FASTADC 1
#define cbi(sfr, bit) (_SFR_BYTE(sfr) &= ~_BV(bit))
#define sbi(sfr, bit) (_SFR_BYTE(sfr) |= _BV(bit))

const byte outPin = 13; // Output pin: digital pin 13(D13)
//const byte interruptPin1 = 2; // Interrupt pin: D2
//const byte interruptPin2 = 3; // Interrupt pin: D2
const byte encoder1_A = 21; // Interrupt pin: D2
const byte encoder1_B = 20; // Interrupt pin: D2
const byte encoder2_A = 19; // Interrupt pin: D2
const byte encoder2_B = 18; // Interrupt pin: D2
const byte resetPin = 5;
volatile byte state = 0;

volatile long encoderpos = 0;

//unsigned long cnt1 = 0; // 추가
//unsigned long cnt2 = 0; // 추가
long cnt1 = 0; // 추가
long cnt2 = 0; // 추가
void setup()
{
  pinMode(outPin, OUTPUT); // Output mode
  //  pinMode(interruptPin1, INPUT_PULLUP); // Input mode, pull-up
  //  pinMode(interruptPin2, INPUT_PULLUP); // Input mode, pull-up
  pinMode(encoder1_A, INPUT_PULLUP);
  pinMode(encoder1_B, INPUT_PULLUP);
  pinMode(encoder2_A, INPUT_PULLUP);
  pinMode(encoder2_B, INPUT_PULLUP);
  pinMode(resetPin, INPUT);

  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);
  pinMode(ENA, OUTPUT);
  pinMode(ENB, OUTPUT);

  //  attachInterrupt(digitalPinToInterrupt(interruptPin1), intfunc1, RISING); // Enable interrupt
  //  attachInterrupt(digitalPinToInterrupt(interruptPin2), intfunc2, RISING); // Enable interrupt
  attachInterrupt(digitalPinToInterrupt(encoder1_A), intfunc1, RISING); // Enable interrupt
  attachInterrupt(digitalPinToInterrupt(encoder2_A), intfunc2, RISING); // Enable interrupt

  int i;
  for (i = 0; i < NPIXELS; i++)
  {
    LineSensor_Data[i] = 0;
    LineSensor_Data_Adaption[i] = 0;
    MAX_LineSensor_Data[i] = 1023;
    MIN_LineSensor_Data[i] = 0;
  }
  pinMode(SIpin, OUTPUT);
  pinMode(CLKpin, OUTPUT);
  pinMode(A0pin, INPUT);

  digitalWrite(SIpin, LOW);
  digitalWrite(CLKpin, LOW);

#if FASTADC

  sbi(ADCSRA, ADPS2);
  cbi(ADCSRA, ADPS1);
  cbi(ADCSRA, ADPS0);
#endif

  flag_line_adapation = 0;

  Serial.begin(115200);
  Serial.println("TSL1401");
}


void intfunc1()
{

  cnt1++;

}

void intfunc2()
{

  cnt2++;

}

void motor_l(int speed)
{
  if (speed >= 0)
  {
    digitalWrite(IN1, LOW);
    digitalWrite(IN2, HIGH);
    analogWrite(ENA, speed); // 0-255
  }
  else
  {
    digitalWrite(IN1, HIGH);
    digitalWrite(IN2, LOW);
    analogWrite(ENA, -speed);
  }
}

void motor_r(int speed)
{
  if (speed >= 0)
  {
    digitalWrite(IN3, HIGH);
    digitalWrite(IN4, LOW);
    analogWrite(ENB, speed); // 0-255
  }
  else
  {
    digitalWrite(IN3, LOW);
    digitalWrite(IN4, HIGH);
    analogWrite(ENB, -speed);
  }
}

void motor_control(int left_motor_speed, int right_motor_speed)
{
  motor_l(left_motor_speed);
  motor_r(right_motor_speed);
}

////////////////////////////////////////////////////

void threshold_line_image(int threshold_value)
{
  for (int i = 0; i < NPIXELS; i++)
  {
    if (Pixel[i] >= threshold_value)
    {
      Threshold_Data[i] = 255;
    }
    else
    {
      Threshold_Data[i] = 0;
    }
  }
}

void line_control(int line_center)

{
  int error = line_center - IMG_WIDTH_HALF;
  int derivative = error - error_old;
  float output = KP * error + KD * derivative;
  int speed_difference = int(output);

  int right_speed = BASE_SPEED - speed_difference;
  int left_speed  = BASE_SPEED + speed_difference;

  left_speed = constrain(left_speed, 0, 100);
  right_speed = constrain(right_speed, 0, 100);
  Serial.println(left_speed);
  Serial.println(right_speed);


  motor_control(left_speed, right_speed);

  error_old = error;
}

void read_line_camera(void)
{
  int i;
  delay(1);

  digitalWrite(CLKpin, LOW);
  digitalWrite(SIpin, HIGH);
  digitalWrite(CLKpin, HIGH);
  digitalWrite(SIpin, LOW);
  delayMicroseconds(1);

  for (i = 0; i < NPIXELS; i++)
  {
    Pixel[i] = analogRead(A0pin) / 4;
    digitalWrite(CLKpin, LOW);
    delayMicroseconds(1);
    digitalWrite(CLKpin, HIGH);
  }
  digitalWrite(CLKpin, LOW);
}

double line_COM(void)
{
  double COM = 0.0;
  double mass_sum = 0.0;

  for (int i = 0; i < NPIXELS; i++)
  {
    mass_sum += Threshold_Data[i];
    COM += Threshold_Data[i] * i;
  }

  if (mass_sum == 0)
  {
    return -1;
  }

  COM = COM / mass_sum;

  return COM;
}


void loop()
{
  int line_center = 64;

  double cx = 0;
  read_line_camera();
  threshold_line_image(150);
  cx = line_COM();

  line_center  = line_COM();

  encoderpos = 10 * ((cnt1 + cnt2) / 2 * 0.028);

  switch (mission_flag)
  {
    case 0:
      if (encoderpos < 880)
      {
        line_control(line_center);
      }
      else if (encoderpos <= 1015) //거리 조절
      {
        motor_control(100, -100); // 방향 조절
      }
      else
      {
        motor_control(0, 0);
        delay(300);
        encoderpos = cnt1 = cnt2 = 0;
        mission_flag++;
      }
      break;
    case 1:
      if (encoderpos < 400)
      {
        line_control(line_center);
      }
      else
      {
        motor_control(0, 0);
        delay(500);
        encoderpos = cnt1 = cnt2 = 0;
        mission_flag++;
      }
      break;
    case 2:
      if (encoderpos < 780)
      {
        line_control(line_center);
      }
      else if (encoderpos <= 923) //거리 조절
      {
        motor_control(-100, 100); // 방향 조절
      }
      else
      {
        motor_control(0, 0);
        delay(300);
        encoderpos = cnt1 = cnt2 = 0;
        mission_flag++;
      }
      break;
    case 3:
      if (encoderpos < 330)
      {
        line_control(line_center);
      }
      else if (encoderpos <= 490) //거리 조절
      {
        motor_control(-100, 100); // 방향 조절
      }
      else
      {
        motor_control(0, 0);
        delay(100);
        encoderpos = cnt1 = cnt2 = 0;
        mission_flag++;
      }
      break;
    case 4:
      if (encoderpos < 1200)
      {
        line_control(line_center);
      }
      else if (encoderpos <= 1330) //거리 조절
      {
        motor_control(100, -100); // 방향 조절
      }
      else
      {
        motor_control(0, 0);
        delay(100);
        encoderpos = cnt1 = cnt2 = 0;
        mission_flag++;
      }
      break;
    case 5:
      if (encoderpos < 370)
      {
        line_control(line_center);
      }
      else if (encoderpos <= 510) //거리 조절
      {
        motor_control(100, -100); // 방향 조절
      }
      else
      {
        motor_control(0, 0);
        delay(100);
        encoderpos = cnt1 = cnt2 = 0;
        mission_flag++;
      }
      break;


  }
  delay(50);
}
